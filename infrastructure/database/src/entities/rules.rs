//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use super::sea_orm_active_enums::GenerationType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "rules")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub field_id: String,
    pub r#type: GenerationType,
    pub regex_pattern: Option<String>,
    pub regex_replacer: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::fields::Entity",
        from = "Column::FieldId",
        to = "super::fields::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Fields,
}

impl Related<super::fields::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Fields.def()
    }
}

impl Related<super::objects::Entity> for Entity {
    fn to() -> RelationDef {
        super::keys::Relation::Objects.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::keys::Relation::Rules.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
